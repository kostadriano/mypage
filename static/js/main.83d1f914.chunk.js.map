{"version":3,"sources":["components/Navbar/Navbar.js","components/Navbar/NavbarIcons.js","components/Face/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Navbar","_ref","children","react_default","a","createElement","className","NavbarIcons","href","target","fa","Pupil","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","position","console","log","state","posX","x","posY","_this$props","elementDimensions","calculateMaxY","calculateMaxX","calculatePosition","width","height","_this$props2","positionX","positionY","maxX","maxY","y","style","left","concat","top","backgroundColor","borderRadius","React","Component","Eyes","_this2","bind","assertThisInitialized","currentPosition","max","min","elementSize","_this3","_this$props$position","_this$props3","leftDistance","topDistance","ReactCursorPosition","Face_Pupil","pupilaSize","App","components_Navbar_Navbar","Navbar_NavbarIcons","components_Face","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83d1f914.chunk.js","sourcesContent":["import React from 'react';\nimport './Navbar.css';\n\nconst Navbar = ({ children }) => (\n  <div>\n    <div className=\"Navbar\">\n      <div className=\"Navbar__title\">\n        Do you like purple? I do!\n      </div>\n\n      {children}\n    </div>\n  </div>\n)\n\nexport default Navbar;\n","import React from 'react';\nimport { FaLinkedin, FaGithub } from 'react-icons/fa';\n\nconst NavbarIcons = () =>\n  <div className=\"Navbar__icons\">\n    <a href='https://github.com/kostadriano'\n      target=\"_blank\">\n      <FaGithub className=\"Navbar__icon\" />\n    </a>\n\n    <a href='https://www.linkedin.com/in/adriano-costa-0121a1110/'\n      target=\"_blank\">\n      <FaLinkedin className=\"Navbar__icon\" />\n    </a>\n  </div>\n\nexport default NavbarIcons;\n","import React from 'react';\nimport './Face.css';\nimport ReactCursorPosition from 'react-cursor-position';\n\nclass Pupil extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { position } = props;\n\n    console.log(position);\n    this.state = {\n      posX: position.x,\n      posY: 0\n    }\n\n    // this.setPosition = this.setPosition.bind(this);\n  }\n\n  render() {\n    const { elementDimensions, calculateMaxY, calculateMaxX, calculatePosition } = this.props\n    const { height, width } = elementDimensions;\n    const {positionX, positionY} = this.props;\n\n    const maxX = calculateMaxX(width);\n    const maxY = calculateMaxY(width);\n\n    const x = calculatePosition(positionX, maxX, 20);\n    const y = calculatePosition(positionY, maxY, 20);\n    console.log(width)\n\n    return (\n      <div className=\"Pupil\"\n        style={{\n          left: `${x}px`,\n          top: `${y}px`,\n          // top: `${position.y > maxY ? maxY : position.y}px`,\n          height: \"15px\",\n          width: \"15px\",\n          backgroundColor: \"black\",\n          borderRadius: \"5px\"\n        }}\n      >\n      </div>\n    )\n  }\n}\n\nclass Eyes extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.calculatePosition = this.calculatePosition.bind(this);\n  }\n\n  calculatePosition(currentPosition, max, min, elementSize) {\n    if (currentPosition < min + elementSize / 2) {\n      return 0;\n    }\n\n    if (currentPosition > max - elementSize / 2) {\n      return max - min - (elementSize)\n    }\n\n    return currentPosition - min - (elementSize / 2)\n  }\n\n  render() {\n    const { x, y } = this.props.position;\n    const { leftDistance, topDistance } = this.props;\n\n    return (\n      <ReactCursorPosition className=\"Eyes\"\n        style={{\n          left: `${leftDistance}px`,\n          top: `${topDistance}px`\n        }}\n      >\n        <Pupil\n          positionX={x}\n          positionY={y}\n          calculateMaxX={(width) => leftDistance + 104}\n          calculateMaxY={(width) => topDistance + 104}\n          calculatePosition={(position, max, pupilaSize) => this.calculatePosition(position, max, leftDistance, pupilaSize)} />\n      </ReactCursorPosition>\n    );\n  }\n}\n\nexport default Eyes;\n\n","import React, { Component } from 'react';\nimport Navbar from '../Navbar/Navbar';\nimport NavbarIcons from '../Navbar/NavbarIcons';\nimport Eyes from '../Face';\nimport ReactCursorPosition from 'react-cursor-position';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\"  >\n        <Navbar>\n          <NavbarIcons />\n        </Navbar>\n\n        <ReactCursorPosition className=\"Face\">\n          <Eyes leftDistance={50} topDistance={50}/>\n        </ReactCursorPosition>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}