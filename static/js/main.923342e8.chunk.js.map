{"version":3,"sources":["components/App/App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","test1","_test","color","-webkit-background-clip","backgroundClip","backgroundImage","Object","defineProperty","test2","@supports (-webkit-background-clip:text)","-webkit-text-fill-color","@supports (background-clip: text)","Rainbow1","_ref","children","classes","react_default","a","createElement","Box","component","className","Rainbow2","_ref2","SVVV","_ref3","xmlns","version","style","width","display","id","x1","y1","x2","y2","gradientUnits","offset","stop-color","fill","x","y","App","py","Container","maxWidth","Typography","variant","App_Rainbow1","App_Rainbow2","App_SVVV","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qTAMMA,EAAYC,YAAW,CAC3BC,OAAKC,EAAA,CACHC,MAAO,OACPC,0BAA2B,OAC3BC,eAAgB,OAChBC,gBAAiB,QAJdC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,kBAMD,8FANCK,OAAAC,EAAA,EAAAD,CAAAL,EAOH,0BAA2B,eAPxBA,GASLO,MAAO,CACLN,MAAO,OACPG,gBAAiB,OACjBI,2CAA4C,CAC1CN,0BAA2B,OAC3BE,gBACE,6FACFK,0BAA2B,eAE7BC,oCAAqC,CACnCP,eAAgB,OAChBC,gBACE,6FACFK,0BAA2B,cAC3BR,MAAO,kBAMPU,EAAW,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SACZC,EAAUjB,IAEhB,OAAOkB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,UAAU,OAAOC,UAAWN,EAAQf,OAC7Cc,IAICQ,EAAW,SAAAC,GAAkB,IAAfT,EAAeS,EAAfT,SACZC,EAAUjB,IAEhB,OAAOkB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,UAAU,OAAOC,UAAWN,EAAQP,OAC7CM,IAICU,EAAO,SAAAC,GAAA,IAAGX,EAAHW,EAAGX,SAAH,OAAkBE,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,6BAA6BC,QAAQ,MAAMC,MAAO,CAAEC,MAAO,OAAQC,QAAQ,iBACnHd,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,kBAAgBa,GAAG,gBAAgBC,GAAG,MAAMC,GAAG,OAAOC,GAAG,UAAUC,GAAG,WAAWC,cAAc,kBAC7FpB,EAAAC,EAAAC,cAAA,QAAMmB,OAAO,YAAYC,aAAW,YACpCtB,EAAAC,EAAAC,cAAA,QAAMmB,OAAO,WAAWC,aAAW,YACnCtB,EAAAC,EAAAC,cAAA,QAAMmB,OAAO,WAAWC,aAAW,YACnCtB,EAAAC,EAAAC,cAAA,QAAMmB,OAAO,WAAWC,aAAW,cAGvCtB,EAAAC,EAAAC,cAAA,QAAMqB,KAAK,sBAAsBC,EAAE,KAAKC,EAAE,OACvC3B,KAmBU4B,mLAbX,OACE1B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKwB,GAAI,GACP3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAWC,SAAS,MAClB7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAYC,QAAQ,MAApB,WAAiC/B,EAAAC,EAAAC,cAAC8B,EAAD,oBACjChC,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAYC,QAAQ,MAApB,WAAiC/B,EAAAC,EAAAC,cAAC+B,EAAD,kCACjCjC,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAYC,QAAQ,MAApB,WAAiC/B,EAAAC,EAAAC,cAACgC,EAAD,iCAPzBC,aCtDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.923342e8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Box, Container, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/styles';\n\n\nconst useStyles = makeStyles({\n  test1: {\n    color: '#000',\n    '-webkit-background-clip': 'text',\n    backgroundClip: 'text',\n    backgroundImage: 'none',\n    backgroundImage:\n      'linear-gradient(79.57deg, #F0CC0F -8.37%, #F175B7 31.07%, #7066EC 60.45%, #0DB5F2 102.44%)',\n    '-webkit-text-fill-color': 'transparent',\n  },\n  test2: {\n    color: '#000',\n    backgroundImage: 'none',\n    '@supports (-webkit-background-clip:text)': {\n      '-webkit-background-clip': 'text',\n      backgroundImage:\n        'linear-gradient(79.57deg, #F0CC0F -8.37%, #F175B7 31.07%, #7066EC 60.45%, #0DB5F2 102.44%)',\n      '-webkit-text-fill-color': 'transparent',\n    },\n    '@supports (background-clip: text)': {\n      backgroundClip: 'text',\n      backgroundImage:\n        'linear-gradient(79.57deg, #F0CC0F -8.37%, #F175B7 31.07%, #7066EC 60.45%, #0DB5F2 102.44%)',\n      '-webkit-text-fill-color': 'transparent',\n      color: 'transparent'\n    }\n  }\n})\n\n\nconst Rainbow1 = ({ children }) => {\n  const classes = useStyles()\n\n  return <Box component=\"span\" className={classes.test1}>\n    {children}\n  </Box>\n}\n\nconst Rainbow2 = ({ children }) => {\n  const classes = useStyles()\n\n  return <Box component=\"span\" className={classes.test2}>\n    {children}\n  </Box>\n}\n\nconst SVVV = ({ children }) => <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" style={{ width: '100%', display:\"inline-block\" }}>\n  <defs>\n    <linearGradient id=\"paint0_linear\" x1=\"-82\" y1=\"-3.5\" x2=\"221.709\" y2=\"-164.804\" gradientUnits=\"userSpaceOnUse\">\n      <stop offset=\"0.0754822\" stop-color=\"#F0CC0F\" />\n      <stop offset=\"0.317708\" stop-color=\"#F175B7\" />\n      <stop offset=\"0.498162\" stop-color=\"#7066EC\" />\n      <stop offset=\"0.756121\" stop-color=\"#0DB5F2\" />\n    </linearGradient>\n  </defs>\n  <text fill=\"url(#paint0_linear)\" x=\"50\" y=\"100\">\n    {children}</text>\n</svg>\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Box py={8}>\n        <Container maxWidth=\"md\">\n          <Typography variant=\"h1\">Testing <Rainbow1>this shit1</Rainbow1></Typography>\n          <Typography variant=\"h1\">Testing <Rainbow2>this shit2 with supports</Rainbow2></Typography>\n          <Typography variant=\"h1\">Testing <SVVV>this Svg shite</SVVV></Typography>\n\n        </Container>\n      </Box>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}