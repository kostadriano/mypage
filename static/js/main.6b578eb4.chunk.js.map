{"version":3,"sources":["components/Navbar/Navbar.js","components/Navbar/NavbarIcons.js","components/Face/Pupil.js","components/Face/Eye.js","components/Face/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Navbar","_ref","children","react_default","a","createElement","className","NavbarIcons","href","target","fa","Pupil","_this$props","this","props","rangeX","rangeY","calculatePosition","_this$props2","positionX","positionY","x","position","max","min","size","y","style","left","concat","top","height","width","React","Component","Eye","_this$props$position","leftDistance","topDistance","Face_Pupil","Face","ReactCursorPosition","Face_Eye","App","components_Navbar_Navbar","Navbar_NavbarIcons","components_Face","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b578eb4.chunk.js","sourcesContent":["import React from 'react';\nimport './Navbar.css';\n\nconst Navbar = ({ children }) => (\n  <div>\n    <div className=\"Navbar\">\n      <div className=\"Navbar__title\">\n        Do you like purple? I do!\n      </div>\n\n      {children}\n    </div>\n  </div>\n)\n\nexport default Navbar;\n","import React from 'react';\nimport { FaLinkedin, FaGithub } from 'react-icons/fa';\n\nconst NavbarIcons = () =>\n  <div className=\"Navbar__icons\">\n    <a href='https://github.com/kostadriano'\n      target=\"_blank\">\n      <FaGithub className=\"Navbar__icon\" />\n    </a>\n\n    <a href='https://www.linkedin.com/in/adriano-costa-0121a1110/'\n      target=\"_blank\">\n      <FaLinkedin className=\"Navbar__icon\" />\n    </a>\n  </div>\n\nexport default NavbarIcons;\n","import React from 'react';\n\nclass Pupil extends React.Component {\n  render() {\n    const { rangeX, rangeY, calculatePosition } = this.props\n    const { positionX, positionY } = this.props;\n    const height = 20;\n    const width = 20;\n\n    const x = calculatePosition({\n      position: positionX,\n      max: rangeX.max,\n      min: rangeX.min,\n      size: width\n    });\n\n    const y = calculatePosition({\n      position: positionY,\n      max: rangeY.max,\n      min: rangeY.min,\n      size: height\n    });\n\n    return (\n      <div className=\"Pupil\"\n        style={{\n          left: `${x}px`,\n          top: `${y}px`,\n          height: `${height}px`,\n          width: `${width}px`\n        }}\n      >\n      </div>\n    )\n  }\n};\n\nexport default Pupil;\n","import React from 'react';\nimport Pupil from './Pupil';\n\nclass Eye extends React.Component {\n  calculatePosition({ position, max, min, size }) {\n    if (position < min + size / 2) {\n      return 0;\n    }\n\n    if (position > max - (size / 2)) {\n      return max - min - size;\n    }\n\n    return position - min - (size / 2)\n  }\n\n  render() {\n    const { x, y } = this.props.position;\n    const { leftDistance, topDistance, width, height } = this.props;\n\n    return (\n      <div className=\"Eye\"\n        style={{\n          left: `${leftDistance}px`,\n          top: `${topDistance}px`,\n          height: `${height}px`,\n          width: `${width}px`\n        }}\n      >\n        <Pupil\n          positionX={x}\n          positionY={y}\n          rangeX={{ min: leftDistance, max: leftDistance + width }}\n          rangeY={{ min: topDistance, max: topDistance + height }}\n          calculatePosition={this.calculatePosition}\n        />\n      </div>\n    );\n  };\n};\n\nexport default Eye;\n","import React from 'react';\nimport ReactCursorPosition from 'react-cursor-position';\nimport Eye from './Eye.js';\nimport './Face.css';\n\nconst Face = () =>\n  <ReactCursorPosition className=\"Face\">\n    <Eye\n      leftDistance={50}\n      topDistance={50}\n      height={150}\n      width={150}\n    />\n\n    <Eye\n      leftDistance={300}\n      topDistance={50}\n      height={150}\n      width={150}\n    />\n  </ReactCursorPosition>\n\nexport default Face;\n","import React, { Component } from 'react';\nimport Navbar from '../Navbar/Navbar';\nimport NavbarIcons from '../Navbar/NavbarIcons';\nimport Face from '../Face';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\"  >\n        <Navbar>\n          <NavbarIcons />\n        </Navbar>\n\n        <Face />\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}